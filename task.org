# EOPL
* TODO Chapter 5 [15/26]
  :PROPERTIES:
  :COOKIE_DATA: recursive
  :END:
  1. CPS Interpreter [10/16]
     1) [ ] CPS Lambda Style
     2) [X] CPS Data Rep
     3) [X] let2 (generalized in 5.7)
     4) [X] let3 (generalized in 5.7)
     5) [X] list extendsion
     6) [X] list keyword (sophisticated)
     7) [X] multiple declaration let
     8) [X] multiple declaration lambda
     9) [X] implicit reference langauge (same with let expression)
     10) [X] implicit reference langauge (change binding to other storage)
     11) [X] begin expression
     12) [ ] output information (IO Monad makes printing problematic) Pending
     13) [ ] fact ~fact-iter~
     14) [ ] profile ~fact-iter~ and ~fact~  (IO Monad)
     15) [ ] list continuation representation (~StateT~ / ~ReaderT~)
     16) [ ] statement extension (to be implemented in monadic interp)
  2. Trampolined Interpreter (tail recursion) [3/6] 
     17) [@17] [X] wrap ~Bounce~ type around ~applyProcedureK~
     18) [X] ~data~ representation of ~Bounce~
     19) [X] wrap it around ~applyCont~ will have not type change
     20) [ ] optimize ending ~applyCont KEmpty refVal~
     21) [ ] implement in procedural language (replacing trampoline as loop) (to
         be implemented in code generation)
     22) [ ] to be verified later
  3. Imperative Interpreter (State Monad, Skipped) [0/0]
  4. Exception [2/4]
     35) [@35] [ ] Direct Access to apply-handler (Omitted for a while)
         - Add one more try layer
         - Memorize try-cont 
         - ~StateT~ Monad
     36) [ ] use two continuation to deal with exceptions
     37) [X] call with wrong number of arguments
         - Partial Application was implemented
     38) [X] division and ~divbyzero~

