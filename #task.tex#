% Created 2019-06-24 Mon 14:43
% Intended LaTeX compiler: pdflatex
\documentclass[11pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{graphicx}
\usepackage{grffile}
\usepackage{longtable}
\usepackage{wrapfig}
\usepackage{rotating}
\usepackage[normalem]{ulem}
\usepackage{amsmath}
\usepackage{textcomp}
\usepackage{amssymb}
\usepackage{capt-of}
\usepackage{hyperref}
\date{\today}
\title{}
\hypersetup{
 pdfauthor={},
 pdftitle={},
 pdfkeywords={},
 pdfsubject={},
 pdfcreator={Emacs 26.2 (Org mode 9.1.9)}, 
 pdflang={English}}
\begin{document}

\tableofcontents

\section{{\bfseries\sffamily TODO} Chapter 5 [15/26]}
\label{sec:org4be90b9}
\begin{enumerate}
\item CPS Interpreter [10/16]
\begin{enumerate}
\item[{$\square$}] CPS Lambda Style
\item[{$\boxtimes$}] CPS Data Rep
\item[{$\boxtimes$}] let2 (generalized in 5.7)
\item[{$\boxtimes$}] let3 (generalized in 5.7)
\item[{$\boxtimes$}] list extendsion
\item[{$\boxtimes$}] list keyword (sophisticated)
\item[{$\boxtimes$}] multiple declaration let
\item[{$\boxtimes$}] multiple declaration lambda
\item[{$\boxtimes$}] implicit reference langauge (same with let expression)
\item[{$\boxtimes$}] implicit reference langauge (change binding to other storage)
\item[{$\boxtimes$}] begin expression
\item[{$\square$}] output information (IO Monad makes printing problematic) Pending
\item[{$\square$}] fact \texttt{fact-iter}
\item[{$\square$}] profile \texttt{fact-iter} and \texttt{fact}  (IO Monad)
\item[{$\square$}] list continuation representation (\texttt{StateT} / \texttt{ReaderT})
\item[{$\square$}] statement extension (to be implemented in monadic interp)
\end{enumerate}
\item Trampolined Interpreter (tail recursion) [3/6] 
\begin{enumerate}
\setcounter{enumii}{16}
\item[{$\boxtimes$}] wrap \texttt{Bounce} type around \texttt{applyProcedureK}
\item[{$\boxtimes$}] \texttt{data} representation of \texttt{Bounce}
\item[{$\boxtimes$}] wrap it around \texttt{applyCont} will have not type change
\item[{$\square$}] optimize ending \texttt{applyCont KEmpty refVal}
\item[{$\square$}] implement in procedural language (replacing trampoline as loop) (to
be implemented in code generation)
\item[{$\square$}] to be verified later
\end{enumerate}
\item Imperative Interpreter (State Monad, Skipped) [0/0]
\item Exception [2/4]
\begin{enumerate}
\setcounter{enumii}{34}
\item[{$\square$}] Direct Access to apply-handler (Omitted for a while)
\begin{itemize}
\item Add one more try layer
\item Memorize try-cont
\item \texttt{StateT} Monad
\end{itemize}
\item[{$\square$}] use two continuation to deal with exceptions
\item[{$\boxtimes$}] call with wrong number of arguments
\begin{itemize}
\item Partial Application was implemented
\end{itemize}
\item[{$\boxtimes$}] division and \texttt{divbyzero}
\end{enumerate}
\end{enumerate}

\section{{\bfseries\sffamily TODO} Chapter 7 (Types) [0/1]}
\label{sec:orgc41a6db}
\begin{enumerate}
\item[{$\square$}] What types do value of following expressions have?
\begin{enumerate}
\item \texttt{\textbackslash{}x -> x - 3}: \texttt{int -> int}
\item \texttt{\textbackslash{}f -> \textbackslash{}x -> (f x) - 1}: \texttt{('a -> int) -> 'a -> int}
\item \texttt{\textbackslash{}x -> x}: \texttt{'a -> 'a}
\item \texttt{\textbackslash{}x -> \textbackslash{}y -> x y}: \texttt{('a -> 'b) -> 'a -> 'b}
\item \texttt{\textbackslash{}x -> (x 3)}: \texttt{(int -> 'a) -> 'a}
\item \texttt{\textbackslash{}x -> (x x)}: infinite type \texttt{t -> t}
\item \texttt{\textbackslash{}x -> if x then 88 else 99}: \texttt{bool -> int}
\item \texttt{\textbackslash{}x -> \textbackslash{}y -> if x then y else 99}: \texttt{bool -> int -> int}
\item \texttt{(\textbackslash{}p -> if p then 99 else 99) 33}: type error
\item \texttt{(\textbackslash{}p -> if p then 99 else 99) (\textbackslash{}z -> z)}: type error
\item \texttt{\textbackslash{}f -> \textbackslash{}g -> \textbackslash{}p -> \textbackslash{}x -> if (p (f x)) then (g 1) else (f x) - 1}: 
\texttt{('a -> int) -> (int -> int) -> (int -> bool) -> 'a}
\end{enumerate}
\item 
\end{enumerate}
\end{document}